(load "package://rhp_dynamixel_hand/euslisp/rhp3hand_r-interface.l")
(load "package://rhp_dynamixel_hand/euslisp/rhp3hand_l-interface.l")

(defun dxl-hand-init (&key (realp t))
  (setq *rhand* (instance rhp3hand_r-robot :init))
  (setq *lhand* (instance rhp3hand_l-robot :init))
  (when realp
    (setq *rhand-ri* (instance* rhp3hand_r-interface :init nil))
    (setq *lhand-ri* (instance* rhp3hand_l-interface :init nil))
    )
  )

(defun hand-grasp (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 95 30))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 500)
      (send *rhand-ri* :wait-interpolation)
      )
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 95 100))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 500)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 95 -30))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 500)
      (send *lhand-ri* :wait-interpolation)
      )
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 95 -100))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 500)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-grasp-tight (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 100 30))
      ;;(send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 500)
      (send *rhand-ri* :angle-vector #f(-90 100 30) 500)
      (send *rhand-ri* :wait-interpolation)
      )
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 100 100))
      ;;(send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 500)
      (send *rhand-ri* :angle-vector #f(-90 100 100) 500)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 110 -30))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 500)
      (send *lhand-ri* :wait-interpolation)
      )
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 110 -100))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 500)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-open (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 90 30))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 500)
      (send *rhand-ri* :wait-interpolation)
      )
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 0 30))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 500)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 90 -30))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 500)
      (send *lhand-ri* :wait-interpolation)
      )
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 0 -30))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 500)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-hook (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 0 30))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 0 -30))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-hook2 (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(0 0 60))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(0 0 -60))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-reset (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(0 0 0))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(0 0 0))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )

(defun hand-ring (arm)
  (when (eq arm :rarm)
    (when (boundp '*rhand-ri*)
      (send *rhand* :angle-vector #f(-90 60 90))
      (send *rhand-ri* :angle-vector (send *rhand* :angle-vector) 1000)
      (send *rhand-ri* :wait-interpolation)
      )
    )
  (when (eq arm :larm)
    (when (boundp '*lhand-ri*)
      (send *lhand* :angle-vector #f(90 60 -90))
      (send *lhand-ri* :angle-vector (send *lhand* :angle-vector) 1000)
      (send *lhand-ri* :wait-interpolation)
      )
    )
  )
